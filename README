 ## Livrable
 	getdf.py : sert pour calculer les descripteurs de type TF, TF-IDF
 	json_gen.py : sert pour la génération des fichiers JSON
 	word2vec.py : sert pour calculer les discripteurs avec embedding
 	eval_test.py : sert à tester les résultats des différents méthodes en les comparants avec le fichier de relation initiale
	trt_doc.py : sert à faire des traitement sur les fichiers (txt, json)
	serveur.py : serveur pour pouvoir utiliser le moteur de recherche


## Partie Génération (json_gen.py)

	python json_gen.py -h => affiche l'aide

étapes de génération :
	1. Importer les fichiers des bases de donnée en brut
	2. les transformer en Json avec
		 python json_gen.py -m load-BaseProf -fn data/CISI.ALLnettoye 
		 python json_gen.py -m load-NYC -fn data/nytimes_news_articlesbis.txt
	3. Choix de la base de données (possibilité de fusionner les plusieurs bd):
		 python json_gen.py -m database [liste fichiers json]
	4. Génération de tfidf
		python json_gen.py -m tfidf
		
Pour utiliser le script des tests :
	Générer les requetes et les relations avec 
		python json_gen.py -m relations
		python json_gen.py -m query
		
## Partie recherche d'un doc via une requete

	lancer le serveur avec : python serveur.py
	puis accéder à : localhost:8080/indexTFIDF pour les descripteurs en mode tfidf
	                 localhost:8080/indexW2V


## Partie test
	lancer python eval_test.py -m [type du test, entre tfidf, random, tf, embedding, comparison (compare les résultat tfidf et embedding]

## Changer de base de données : mettre remplacer les fichiers dans ./data par ceux présent dans ./data/[Type de base] (uniquement remplacer des fichiers, pas de suppression)
